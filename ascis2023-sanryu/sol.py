# challenge3: Simple ROL cipher

def rol(a, x):
    tmp = bin(a)[2:].rjust(8, '0')
    return int(tmp[x:] + tmp[:x], 2)

data = [0xD7, 0x9E, 0xCA, 0x51, 0xA4, 0xEB, 0x8A, 0x48, 0x2B, 0xBE, 
  0x62, 0x04, 0x96, 0x2B, 0xD7, 0x11, 0xDB, 0x63, 0xFA]

ls = [0xf3a8d24e, 0x57286251, 0xed0bb215, 0xc54297c6, 0x1372d3d1, 0x9aebb2fd,
      0x4074858d, 0xd8f50000, 0x95e8f163, 0x325640e9, 0x6c750331, 0x86a54774,
      0xd88dda56, 0xfbd660c5, 0x77f412ae, 0x9077a73e, 0xb8817c4e, 0xb4a4110c,
      0xbc4e8a99, 0x409d7713, 0x935c8213]

for i in range(min(len(ls), len(data))):
    print(end=chr(rol(data[i], 8 - (ls[i] % 8))))

# ==========================================================
# challenge2: Dump RC4 decoded binary -> simple algo

def enc(a1, a2):
    return ((a1 << (8 - a2)) | (a1 >> a2)) & 0xFF

a = [0xDC, 0x3C, 0x0A, 0xBE, 0x75, 0xCB, 0x0A, 0x80, 0xF4, 0x4A, 
  0x8C, 0x86, 0xAA, 0xE4, 0xC3]

b = [0xA7, 0x4F, 0xB2, 0x70, 0x70, 0x50, 0xD8, 0xF9, 0xAB, 0xB1, 
  0xFB, 0x78, 0x77, 0x87, 0x1D, 0xC3]

for i in range(15):
    for j in range(32, 127):
        c = j + 10
        if a[i] ^ enc(a[i], 2) ^ c == b[i]:
            print(end=chr(j))
            break
print()

# Br0WN_FOX_JUmP$_OVER_THe_1@ZY_Do6}
# ==========================================================
# challenge 1: Nanomites, format x-xxxx-xx-xxx
# part 1 = A

# part 2 = 1337

buf = b'1'
s = b'd0j6'

for i in range(3):
    token = 0
    if i % 2 == 0:
        buf += bytes([s[i] - buf[-1]])
    else:
        buf += bytes([buf[-1] - s[i] + 0x30])

print(buf.decode())

# part 3 = hI

for i in range(32, 127):
    for j in range(32, 127):
        if 0xD6A6 == ((i << 8) + j) ^ 0xBEEF:
            print(end=chr(i) + chr(j))

# part 4 = br0: crack sha256 hash in parent process.

# -> key = "A-1337-hI-br0"

print()

from pwn import xor

print(xor([0x7D, 0x7E, 0xB3, 0x90, 0xF9, 0x15, 0xBA, 0xA7, 0x72, 0x68, 
  0xA7, 0x97, 0xF6, 0x62, 0xB7, 0xC1, 0x7E, 0x66, 0xB3, 0x98, 0xF0, 0x12, 0xB9, 0xC9, 0x71, 0x76, 
  0xAA, 0xED, 0xF4, 0x1B, 0xB7, 0xD6], [0x27, 0x2F, 0xFF, 0xDF, 0xBD, 0x57, 0xE3, 0x93, 0x27, 0x2F, 
  0xFF, 0xDF, 0xBD, 0x57, 0xE3, 0x93]))